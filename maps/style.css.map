{"version":3,"sources":["style.scss","helpers/_element-invisible.scss","helpers/_clearfix.scss","base/_base.scss","base/_border-box.scss","modules/_testing-section.scss","variables/_colors.scss","modules/_susy-test.scss","../../bower_components/susy/sass/susy/output/support/_rem.scss","../../bower_components/susy/sass/susy/language/susy/_span.scss","../../bower_components/susy/sass/susy/output/shared/_direction.scss","../../bower_components/susy/sass/susy/language/susy/_gutters.scss","_sprites.scss","style.css"],"names":[],"mappings":"AAEA,gEAAO;ACAP;EACE,8BAA6B;EAC7B,YAAW;EAAG,WAAU;EACxB,iBAAgB;EAChB,4BAA2B;EAAE,cAAc;EAC3C,+BAA8B;CAC/B;;ACND;EACE,mBAAkB;EAClB,eAAc;EACd,aAAY;EACZ,aAAY;EACZ,YAAW;EACX,UAAS;CACV;;AACD;EAAY,sBAAqB;CAAK;;AACtC,qCAAqC;AACrC;EAAmB,WAAU;CAAK;;AAClC;EAAY,eAAc;CAAK;;AAC/B,oCAAoC;ACbpC;;;;EAIE,UAAS;EACT,WAAU;CACX;;AAOD;;;EAGE,UAAS;EACT,iBAAgB;EAChB,cAAa;EACb,yBAAgB;KAAhB,sBAAgB;UAAhB,iBAAgB;CAOjB;;AAbD;;;;;;;EAWI,cAAa;CACd;;ACzBH;EACE,uBAAsB;CACvB;;AAED;;;EAGE,oBAAmB;CACpB;;AAGD;;;;;EAKE,gBAAe;CAChB;;AClBD;EAEE,mBAAkB;EAClB,oCAA2B;UAA3B,4BAA2B;CAwC5B;;AA3CD;EAcI,gCAA+B;EAC/B,iBAAgB;EAChB,eChBe;EDiBf,kBAAiB;EACjB,qBAAoB;CAErB;;AApBH;EAuBI,oCAA2B;EAA3B,4BAA2B;CAC5B;;AAxBH;EA2BI,oBAAmB;CAOpB;;AAlCH;EA6BM,mBAAkB;EAClB,eAAc;EACd,oBAAmB;EACnB,gBAAe;CAChB;;AAjCL;EAqCI,eCnCe;EDoCf,mBAAkB;EAClB,gBAAe;EACf,kBAAiB;CAClB;;AEzCH;ECmBI,cCwI0C;EDxI1C,YEA4D;EFA5D,oBG4D8E;CJ7EjF;;AAGD;EKgGE,6CAAuB;EALvB,gCAhE+B;EAsD/B,aAtDsC;EA0DtC,cA1D6C;CLzB9C;;AK+GG;EAjBF,6CAAuB;EALvB,gCA3EiC;EAiEjC,aAjEwC;EAqExC,cArE+C;CAmG5C;;AAFD;EAjBF,6CAAuB;EALvB,gCAhE+B;EAsD/B,aAtDsC;EA0DtC,cA1D6C;CAwF1C;;AAFD;EAjBF,6CAAuB;EALvB,6BArD2B;EA2C3B,aA3CkC;EA+ClC,cA/CyC;CA6EtC;;AAFD;EAjBF,6CAAuB;EALvB,mCA1CqC;EAgCrC,aAhC4C;EAoC5C,cApCmD;CAkEhD;;AL3GL,cAAc;AACd;EACI,mCAAkC;EAAE,6BAA4B;EAAG,aAAY;EACjF,cAAa;CACd;;AAED,YAAY;AACV;EACE;IACA,sCAAqC;IAAE,6BAA4B;GACpE;CMkJF;;AN7HD;EACE,wBAAuB;CACxB;;AAED;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;CACd;;AAED;EAGE,oBAAmB;CACpB","file":"../app/assets/scss/style.css","sourcesContent":["// Libraries\n// --------------------------------\n@import \"../../bower_components/normalize-css/normalize.css\";\n@import \"../../bower_components/susy/sass/susy\";\n\n\n// Helpers - mixins & functions go here\n// --------------------------------\n@import \"_sprites\";\n@import \"helpers/_element-invisible\";\n@import \"helpers/_clearfix\";\n\n\n// Variables\n// --------------------------------\n@import \"variables/_colors\";\n\n\n// Reset and Base Files\n// --------------------------------\n@import \"base/_base\";\n@import \"base/_border-box\";\n\n\n// Modules\n// --------------------------------\n@import \"modules/_testing-section\";\n@import \"modules/_susy-test\";\n\n\n// Layouts\n// --------------------------------\n\n\n// Objects\n// --------------------------------\n\n\n// Components\n// --------------------------------\n\n\n// Utilities\n// --------------------------------\n\n\n// Other\n// --------------------------------\n","// Add 'element-invisible' class to the element to hide\n// --------------------------------------------------------\n.element-invisible {\n  position: absolute !important;\n  height: 1px; width: 1px;\n  overflow: hidden;\n  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\n  clip: rect(1px, 1px, 1px, 1px);\n}\n","// Add 'clearfix' class to the parent of the floated elements\n// --------------------------------------------------------\n.clearfix:after {\n  visibility: hidden;\n  display: block;\n  font-size: 0;\n  content: \" \";\n  clear: both;\n  height: 0;\n}\n.clearfix { display: inline-block; }\n/* start commented backslash hack \\*/\n* html .clearfix { height: 1%; }\n.clearfix { display: block; }\n/* close commented backslash hack */\n","// Resets margins and paddings for headers, ul, ol and p\nh1,h2,h3,h4,h5,h6,\nul,li,\np,\nblockquote {\n  margin: 0;\n  padding: 0;\n}\n\n// Completely resets form items\n// ----------------------------\n// Super hard reset that removes all borders\n// and radius of all form items.\n// ============================\ninput,\ntextarea,\nbutton {\n  border: 0;\n  border-radius: 0;\n  outline: none;\n  appearance: none;\n\n  &:hover,\n  &:active,\n  &:focus {\n    outline: none;\n  }\n}\n","// Use border-box for everything\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\n// Set Image and Objects to have a max-width of 100%\nembed,\niframe,\nimg,\nobject,\nvideo {\n  max-width: 100%;\n}\n","body {\n  // display: flex;\n  border-radius: 50%;\n  transform: translateX(12px);\n\n// <<<<<<< HEAD\n//\n// =======\n//   .susy-test {\n//     @include span(2);\n//   }\n// >>>>>>> build-task\n\n  h1 {\n    font-family: 'Lato', sans-serif;\n    font-weight: 200;\n    color: $fontColor;\n    font-size: 3.9rem;\n    padding-bottom: 15px;\n\n  }\n\n  h1:hover {\n    transition: color 1.1s ease;\n  }\n\n  p {\n    margin-bottom: 20px;\n    span {\n      font-style: italic;\n      color: magenta;\n      line-height: 1.7rem;\n      font-size: 110%;\n    }\n  }\n\n  p.para {\n    color: $paraColor;\n    font-style: italic;\n    font-size: 130%;\n    line-height: 2rem;\n  }\n\n}\n","$fontColor: #1E4DA7;\n\n$paraColor: #3840A8;\n",".susy-test {\n  @include span(2);\n}\n\n// Regular Images Begin\n.github {\n  @include sprite($github);\n}\n\n@include sprites($spritesheet-sprites);\n//Regular Images End\n\n\n/* Fallback */\n.github {\n    background-image: url(sprites.png); background-position: 0px 0px; width: 142px;\n  height: 120px;\n}\n\n/* Retina */\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    .github {\n    background-image: url(sprites@2x.png); background-size: 282px 240px;\n  }\n}\n\n\n// Fallback 2\n// .github {\n//   @include retina-sprite($github-group);\n// }\n\n\n// Creates all retina sprites\n// @include retina-sprites($retina-groups);\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n\n.section {\n  background-color: green;\n}\n\n.flex {\n  display: flex;\n}\n\n.border-radius {\n  -webkit-border-radius: 12px;\n  -moz-border-radius: 12px;\n  border-radius: 12px;\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$facebook-name: 'facebook';\n$facebook-x: 0px;\n$facebook-y: 120px;\n$facebook-offset-x: 0px;\n$facebook-offset-y: -120px;\n$facebook-width: 121px;\n$facebook-height: 120px;\n$facebook-total-width: 291px;\n$facebook-total-height: 240px;\n$facebook-image: '../images/sprites.png';\n$facebook: (0px, 120px, 0px, -120px, 121px, 120px, 291px, 240px, '../images/sprites.png', 'facebook', );\n$github-name: 'github';\n$github-x: 149px;\n$github-y: 0px;\n$github-offset-x: -149px;\n$github-offset-y: 0px;\n$github-width: 142px;\n$github-height: 120px;\n$github-total-width: 291px;\n$github-total-height: 240px;\n$github-image: '../images/sprites.png';\n$github: (149px, 0px, -149px, 0px, 142px, 120px, 291px, 240px, '../images/sprites.png', 'github', );\n$twitter-name: 'twitter';\n$twitter-x: 0px;\n$twitter-y: 0px;\n$twitter-offset-x: 0px;\n$twitter-offset-y: 0px;\n$twitter-width: 149px;\n$twitter-height: 120px;\n$twitter-total-width: 291px;\n$twitter-total-height: 240px;\n$twitter-image: '../images/sprites.png';\n$twitter: (0px, 0px, 0px, 0px, 149px, 120px, 291px, 240px, '../images/sprites.png', 'twitter', );\n$youtube-name: 'youtube';\n$youtube-x: 121px;\n$youtube-y: 120px;\n$youtube-offset-x: -121px;\n$youtube-offset-y: -120px;\n$youtube-width: 120px;\n$youtube-height: 120px;\n$youtube-total-width: 291px;\n$youtube-total-height: 240px;\n$youtube-image: '../images/sprites.png';\n$youtube: (121px, 120px, -121px, -120px, 120px, 120px, 291px, 240px, '../images/sprites.png', 'youtube', );\n$spritesheet-width: 291px;\n$spritesheet-height: 240px;\n$spritesheet-image: '../images/sprites.png';\n$spritesheet-sprites: ($facebook, $github, $twitter, $youtube, );\n$spritesheet: (291px, 240px, '../images/sprites.png', $spritesheet-sprites, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n","@import url(../../bower_components/normalize-css/normalize.css);\n.element-invisible {\n  position: absolute !important;\n  height: 1px;\n  width: 1px;\n  overflow: hidden;\n  clip: rect(1px 1px 1px 1px);\n  /* IE6, IE7 */\n  clip: rect(1px, 1px, 1px, 1px);\n}\n\n.clearfix:after {\n  visibility: hidden;\n  display: block;\n  font-size: 0;\n  content: \" \";\n  clear: both;\n  height: 0;\n}\n\n.clearfix {\n  display: inline-block;\n}\n\n/* start commented backslash hack \\*/\n* html .clearfix {\n  height: 1%;\n}\n\n.clearfix {\n  display: block;\n}\n\n/* close commented backslash hack */\nh1, h2, h3, h4, h5, h6,\nul, li,\np,\nblockquote {\n  margin: 0;\n  padding: 0;\n}\n\ninput,\ntextarea,\nbutton {\n  border: 0;\n  border-radius: 0;\n  outline: none;\n  appearance: none;\n}\n\ninput:hover, input:active, input:focus,\ntextarea:hover,\ntextarea:active,\ntextarea:focus,\nbutton:hover,\nbutton:active,\nbutton:focus {\n  outline: none;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\nembed,\niframe,\nimg,\nobject,\nvideo {\n  max-width: 100%;\n}\n\nbody {\n  border-radius: 50%;\n  transform: translateX(12px);\n}\n\nbody h1 {\n  font-family: 'Lato', sans-serif;\n  font-weight: 200;\n  color: #1E4DA7;\n  font-size: 3.9rem;\n  padding-bottom: 15px;\n}\n\nbody h1:hover {\n  transition: color 1.1s ease;\n}\n\nbody p {\n  margin-bottom: 20px;\n}\n\nbody p span {\n  font-style: italic;\n  color: magenta;\n  line-height: 1.7rem;\n  font-size: 110%;\n}\n\nbody p.para {\n  color: #3840A8;\n  font-style: italic;\n  font-size: 130%;\n  line-height: 2rem;\n}\n\n.susy-test {\n  width: 47.37%;\n  float: left;\n  margin-right: 5.26%;\n}\n\n.github {\n  background-image: url(../images/sprites.png);\n  background-position: -149px 0px;\n  width: 142px;\n  height: 120px;\n}\n\n.facebook {\n  background-image: url(../images/sprites.png);\n  background-position: 0px -120px;\n  width: 121px;\n  height: 120px;\n}\n\n.github {\n  background-image: url(../images/sprites.png);\n  background-position: -149px 0px;\n  width: 142px;\n  height: 120px;\n}\n\n.twitter {\n  background-image: url(../images/sprites.png);\n  background-position: 0px 0px;\n  width: 149px;\n  height: 120px;\n}\n\n.youtube {\n  background-image: url(../images/sprites.png);\n  background-position: -121px -120px;\n  width: 120px;\n  height: 120px;\n}\n\n/* Fallback */\n.github {\n  background-image: url(sprites.png);\n  background-position: 0px 0px;\n  width: 142px;\n  height: 120px;\n}\n\n/* Retina */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .github {\n    background-image: url(sprites@2x.png);\n    background-size: 282px 240px;\n  }\n}\n\n.section {\n  background-color: green;\n}\n\n.flex {\n  display: flex;\n}\n\n.border-radius {\n  -webkit-border-radius: 12px;\n  -moz-border-radius: 12px;\n  border-radius: 12px;\n}\n"]}